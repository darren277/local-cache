user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    
    # Define cache settings
    proxy_cache_path /var/cache/nginx/proxy_cache 
                     levels=1:2 
                     keys_zone=PROXYCACHE:10m 
                     max_size=1g 
                     inactive=60m 
                     use_temp_path=off;
    
    # Configure logging with cache status
    log_format cache_log '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'cache:$upstream_cache_status';
    
    access_log /var/log/nginx/access.log cache_log;

    # Local Flask server
    upstream local_flask {
        server host.docker.internal:5000;
    }

    # Network Flask server
    upstream network_flask {
        server 192.168.1.100:5000;
    }

    # Docker Flask server
    upstream docker_flask {
        server flask-container:5000;
    }

    server {
        listen 8080;
        server_name localhost;

        # Cache configuration for all locations
        proxy_cache PROXYCACHE;
        proxy_cache_valid 200 302 10m;     # Cache successful responses for 10 minutes
        proxy_cache_valid 404 1m;          # Cache not found responses for 1 minute
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_lock on;
        proxy_cache_background_update on;
        
        # Add cache control headers
        add_header X-Cache-Status $upstream_cache_status;
        
        # Local Flask server route
        location /local/ {
            proxy_pass http://local_flask/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            
            # Skip caching for specific patterns
            proxy_cache_bypass $http_cache_control;
            proxy_cache_bypass $arg_nocache;
        }

        # Network Flask server route
        location /network/ {
            proxy_pass http://network_flask/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # Docker Flask server route
        location /docker/ {
            proxy_pass http://docker_flask/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
        
        # Route for manually purging cache
        location ~ /purge(/.*) {
            allow 127.0.0.1;
            deny all;
            proxy_cache_purge PROXYCACHE $scheme$host$1;
        }
    }
}
